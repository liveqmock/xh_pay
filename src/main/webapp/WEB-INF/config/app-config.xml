<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" 
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--
        Scans within the base package of the application for @Components to
        configure as beans
    -->
    <!-- 解决responseBody注解编码问题 -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>text/plain;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>
    
    <context:component-scan base-package="com.xinhuanet.pay"/>
    <context:property-placeholder location="classpath:jdbc.properties"/>

	<bean id="dataSourceBase" class="com.alibaba.druid.pool.DruidDataSource" abstract="true">
        <!-- 配置初始化大小、最小、最大 -->
        <property name="maxActive" value="50" />
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
		<!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true" /> 
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800" /> 
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" /> 
	</bean>

<!--     主库配置，主要处理wirte操作 -->
	<bean id="dataSource" parent="dataSourceBase" init-method="init" destroy-method="close">
        <property name="name" value="dataSource"/>
		<!-- 基本属性 url、user、password -->
	    <property name="url" value="${jdbc.url}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	</bean>
<!--     从库配置，主要处理wirte操作 -->
    <bean id="dataSourceRead" parent="dataSourceBase" init-method="init" destroy-method="close">
        <property name="name" value="dataSourceRead"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url.read}" />
        <property name="username" value="${jdbc.username.read}" />
        <property name="password" value="${jdbc.password.read}" />
    </bean>

    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
	<!-- 声明使用注解式事务 -->
<!-- 	<tx:annotation-driven transaction-manager="txManager"/> -->


	<!-- 
		REQUIRED：业务方法需要在一个事务中运行,如果方法运行时,已经处于一个事务中,那么加入到该事务中,否则自己创建一个新的事务.(Spring默认的事务传播属性)
		NOT_SUPPORTED：声明方法不需要事务,如果方法没有关联到一个事务,容器不会为它开启事务,如果方法在一个事务中被调用,该事务被挂起,在方法调用结束后,原先的事务便会恢复执行
		REQUIRES_NEW：不管是否存在事务,业务方法总会为自己发起一个新的事务,如果方法运行时已经存在一个事务,则该事务会被挂起,新的事务被创建,知道方法执行结束,新事务才结束,原先的事务才恢复执行.
		MANDATORY：指定业务方法只能在一个已经存在的事务中执行,业务方法不能自己发起事务,如果业务方法没有在事务的环境下调用,则容器会抛出异常
		SUPPORTS:如果业务方法在事务中被调用,则成为事务中的一部分,如果没有在事务中调用,则在没有事务的环境下执行
		NEVER：指定业务方法绝对不能在事务范围内运行,否则会抛出异常.
		NESTED：如果业务方法运行时已经存在一个事务,则新建一个嵌套的事务,该事务可以有多个回滚点,如果没有事务,则按REQUIRED属性执行. 注意:业务方法内部事务的回滚不会对外部事务造成影响,但是外部事务的回滚会影响内部事务
	 -->
    <!-- 定义事务传播属性 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="query*" propagation="NOT_SUPPORTED" read-only="true"/>
            <tx:method name="get*" propagation="NOT_SUPPORTED" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="transactionPointCut" expression="execution(* com.xinhuanet.pay.service.*.*(..))"/>
        <aop:advisor pointcut-ref="transactionPointCut" advice-ref="txAdvice"/>
    </aop:config>

    <!-- freemarker config
    <bean id="freemarkerConfig"
        class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/ftl/" />
        <property name="freemarkerSettings">
            <props>
                <prop key="defaultEncoding">UTF-8</prop>
                <prop key="template_exception_handler">ignore</prop>
            </props>
        </property>
    </bean>
    -->

    <!-- quartz start-->
    <bean id="jobDetailFactoryBean" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="quartzServiceImpl" />
        <property name="targetMethod" value="doIt" />
    </bean>

    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="jobDetailFactoryBean" />
        <property name="cronExpression" value="5/15 * * * * ?" />
    </bean>

    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="cronTrigger" />
            </list>
        </property>
    </bean>
    <!-- quartz end-->

    <!-- A file based configuration bean -->
    <bean id="configuration" class="org.apache.commons.configuration.PropertiesConfiguration">
        <constructor-arg value="conf_test.properties"/>
        <property name="reloadingStrategy" ref="reloadingStrategy"/>
        <property name="encoding" value="utf-8"></property>
    </bean>

    <!-- The managed reloading strategy for the configuration bean -->
    <bean id="reloadingStrategy" class="org.apache.commons.configuration.reloading.FileChangedReloadingStrategy"/>
    
    
    <!-- beans service start -->
	<bean id="accountService" class="com.xinhuanet.pay.service.impl.AccountServiceImpl"></bean>
	<!-- beans service end -->
	
	<!-- logInterceptor start-->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.xinhuanet.pay.interceptor.PayLogInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- logInterceptor end-->
	
</beans>
